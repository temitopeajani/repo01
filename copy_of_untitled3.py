# -*- coding: utf-8 -*-
"""Copy of Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bua6HmJQA8A-_PTfBDQNF_XlPG4L4aYh
"""

# 📦 Install RDKit (if not already)
!pip install rdkit-pypi -q

# 📚 Import libraries
from rdkit import Chem
from rdkit.Chem import AllChem, DataStructs
from rdkit.Chem.Pharm2D import Generate, Gobbi_Pharm2D
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import files

# 📤 Upload your CSV
uploaded = files.upload()  # Upload "NewTADB_25cmpds_references_Clean_fromexcel.csv"
filename = "NewTADB_25cmpds_references_Clean_fromexcel.csv"

# 📖 Load data
df = pd.read_csv(filename)

# 🧪 Ensure required columns
if "SMILES" not in df.columns:
    raise ValueError("❌ Your CSV must contain a column named 'SMILES'.")

# 🧬 Generate fingerprints
fps = []
names = []

for i, row in df.iterrows():
    smiles = row["SMILES"]
    name = row["Name"] if "Name" in df.columns else f"Cmpd_{i}"
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        fp = Generate.Gen2DFingerprint(mol, Gobbi_Pharm2D.factory)
        fps.append(fp)
        names.append(name)

# 🔁 Create similarity matrix
n = len(fps)
sim_matrix = np.zeros((n, n))
for i in range(n):
    for j in range(n):
        sim_matrix[i, j] = DataStructs.DiceSimilarity(fps[i], fps[j])

# 📊 Plot clustered heatmap
df_sim = pd.DataFrame(sim_matrix, index=names, columns=names)
sns.set(style="white")
sns.clustermap(df_sim, cmap="viridis", figsize=(12, 10))
plt.suptitle("Pharm2D Similarity – Clustered Heatmap", y=1.02)
plt.show()

# 💾 Save matrix
df_sim.to_csv("Pharm2D_Similarity_Matrix.csv")
files.download("Pharm2D_Similarity_Matrix.csv")

print("Column names:", df.columns.tolist())

# 📤 Step 3: Upload the file
uploaded = files.upload()  # Upload: NewTADB_25cmpds_references_Clean_fromexcel.csv
filename = list(uploaded.keys())[0]

# 📖 Step 4: Read and clean CSV (semicolon-delimited)
df = pd.read_csv(filename, delimiter=';')
df.columns = df.columns.str.strip()

# ✅ Check required columns
if "SMILES" not in df.columns:
    raise ValueError(f"❌ Couldn't find 'SMILES' column. Found: {df.columns.tolist()}")

# 🧬 Step 5: Generate fingerprints
fps = []
names = []

for i, row in df.iterrows():
    smiles = row["SMILES"]
    name = row["Molecule Name"] if "Molecule Name" in df.columns else f"Cmpd_{i}"
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        fp = Generate.Gen2DFingerprint(mol, Gobbi_Pharm2D.factory)
        fps.append(fp)
        names.append(name)

# 🔁 Step 6: Compute similarity matrix
n = len(fps)
sim_matrix = np.zeros((n, n))
for i in range(n):
    for j in range(n):
        sim_matrix[i, j] = DataStructs.DiceSimilarity(fps[i], fps[j])

# 📊 Step 7: Create and plot heatmap
df_sim = pd.DataFrame(sim_matrix, index=names, columns=names)
sns.set(style="white")
sns.clustermap(df_sim, cmap="viridis", figsize=(12, 10))
plt.suptitle("Pharm2D Similarity – Clustered Heatmap", y=1.02)
plt.show()

# 💾 Step 8: Save and download matrix
df_sim.to_csv("Pharm2D_Similarity_Matrix.csv")
files.download("Pharm2D_Similarity_Matrix.csv")

# 📦 Step 1: Install compatible NumPy version
!pip install numpy==1.24.3 -q

# 📦 Step 2: Install RDKit
!pip install rdkit-pypi -q

# ✨ Restart runtime to load correct NumPy and RDKit versions
import os
os.kill(os.getpid(), 9)

# 📚 Step 3: Import everything (do this AFTER installing packages)
from rdkit import Chem
from rdkit.Chem import AllChem, DataStructs
from rdkit.Chem.Pharm2D import Generate, Gobbi_Pharm2D
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import files # <--- THIS must come before calling `files.upload()`

# 📤 Step 4: Upload the file
uploaded = files.upload()  # Upload: NewTADB_25cmpds_references_Clean_fromexcel.csv
filename = list(uploaded.keys())[0]

# 📖 Step 5: Read and clean CSV (semicolon-delimited)
df = pd.read_csv(filename, delimiter=';')
df.columns = df.columns.str.strip()

# ✅ Step 6: Check required columns
if "SMILES" not in df.columns:
    raise ValueError(f"❌ Couldn't find 'SMILES' column. Found: {df.columns.tolist()}")

# 🧬 Step 7: Generate 2D pharmacophore fingerprints
fps = []
names = []

for i, row in df.iterrows():
    smiles = row["SMILES"]
    name = row["Molecule Name"] if "Molecule Name" in df.columns else f"Cmpd_{i}"
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        fp = Generate.Gen2DFingerprint(mol, Gobbi_Pharm2D.factory)
        fps.append(fp)
        names.append(name)

# 🔁 Step 8: Compute similarity matrix
n = len(fps)
sim_matrix = np.zeros((n, n))
for i in range(n):
    for j in range(n):
        sim_matrix[i, j] = DataStructs.DiceSimilarity(fps[i], fps[j])

# 📊 Step 9: Plot clustered heatmap
df_sim = pd.DataFrame(sim_matrix, index=names, columns=names)
sns.set(style="white")
sns.clustermap(df_sim, cmap="viridis", figsize=(12, 10))
plt.suptitle("Pharm2D Similarity – Clustered Heatmap", y=1.02)
plt.show()

# 💾 Step 10: Save and download matrix
df_sim.to_csv("Pharm2D_Similarity_Matrix.csv")
files.download("Pharm2D_Similarity_Matrix.csv")

# 📚 Step 3: Import everything (do this AFTER installing packages)
from rdkit import Chem
from rdkit.Chem import AllChem, DataStructs
from rdkit.Chem.Pharm2D import Generate, Gobbi_Pharm2D
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import files # <--- THIS must come before calling `files.upload()`

# 📤 Step 4: Upload the file
uploaded = files.upload()  # Upload: NewTADB_25cmpds_references_Clean_fromexcel.csv
filename = list(uploaded.keys())[0]

# 📖 Step 5: Read and clean CSV (semicolon-delimited)
df = pd.read_csv(filename, delimiter=';')
df.columns = df.columns.str.strip()

# ✅ Step 6: Check required columns
if "SMILES" not in df.columns:
    raise ValueError(f"❌ Couldn't find 'SMILES' column. Found: {df.columns.tolist()}")

# 🧬 Step 7: Generate 2D pharmacophore fingerprints
fps = []
names = []

for i, row in df.iterrows():
    smiles = row["SMILES"]
    name = row["Molecule Name"] if "Molecule Name" in df.columns else f"Cmpd_{i}"
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        fp = Generate.Gen2DFingerprint(mol, Gobbi_Pharm2D.factory)
        fps.append(fp)
        names.append(name)

# 🔁 Step 8: Compute similarity matrix
n = len(fps)
sim_matrix = np.zeros((n, n))
for i in range(n):
    for j in range(n):
        sim_matrix[i, j] = DataStructs.DiceSimilarity(fps[i], fps[j])

# 📊 Step 9: Plot clustered heatmap
df_sim = pd.DataFrame(sim_matrix, index=names, columns=names)
sns.set(style="white")
sns.clustermap(df_sim, cmap="viridis", figsize=(12, 10))
plt.suptitle("Pharm2D Similarity – Clustered Heatmap", y=1.02)
plt.show()

# 💾 Step 10: Save and download matrix
df_sim.to_csv("Pharm2D_Similarity_Matrix.csv")
files.download("Pharm2D_Similarity_Matrix.csv")

# 📤 Upload CSV with compound SMILES

# ✅ Reference compounds (as SMILES)
ref_smiles = {
    "Estradiol": "C1CCC2=C(C1)C(=CC=C2)C3C4CCC5C(C4CCC3O)CCC5O",
    "Tamoxifen": "CC/C(=C(/C1=CC=CC=C1)\C2=CC=CC=C2)/CCN(C)C",
    "PHTPP": "C1=CC=C(C=C1)C2=NC3=C(C=CC=C3OC2=O)C4=CC=C(C=C4)F",
    "WAY-200070": "CC(C)CN1C=NC2=C1C=C(C=C2)OC3=CC=CC=C3C(=O)O"
}

# 🧬 Generate fingerprints for references
ref_fps = {}
for name, smiles in ref_smiles.items():
    mol = Chem.MolFromSmiles(smiles)
    ref_fps[name] = AllChem.GetMorganFingerprintAsBitVect(mol, 2, nBits=2048)

# 🧪 Compute similarity to each reference
similarity_data = []

for i, row in df.iterrows():
    smiles = row["SMILES"]
    name = row["Molecule Name"] if "Molecule Name" in df.columns else f"Cmpd_{i}"
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        fp = AllChem.GetMorganFingerprintAsBitVect(mol, 2, nBits=2048)
        sim_scores = {ref: DataStructs.TanimotoSimilarity(fp, ref_fps[ref]) for ref in ref_fps}

        # 🔍 Classification rule
        if sim_scores["Estradiol"] > 0.75:
            label = "Agonist-like"
        elif sim_scores["WAY-200070"] > 0.7:
            label = "ERβ Agonist-like"
        elif sim_scores["PHTPP"] > 0.7:
            label = "ERβ Antagonist-like"
        elif sim_scores["Tamoxifen"] > 0.7:
            label = "SERM / General Antagonist"
        else:
            label = "Unclassified"

        similarity_data.append({
            "Name": name,
            "SMILES": smiles,
            **sim_scores,
            "Predicted_Class": label
        })

# 📊 Create DataFrame
df_sim = pd.DataFrame(similarity_data)

# 💾 Save result
df_sim.to_csv("Compound_Classification_Similarity.csv", index=False)
files.download("Compound_Classification_Similarity.csv")

# 🖼️ Preview top few rows
df_sim.head()

# 📊 Radar chart for similarity profile
import numpy as np
import matplotlib.pyplot as plt

# 🔢 Select a few compounds to visualize
top_n = 5
categories = ["Estradiol", "Tamoxifen", "PHTPP", "WAY-200070"]
num_vars = len(categories)

for i in range(top_n):
    row = df_sim.iloc[i]
    values = [row[cat] for cat in categories]
    values += values[:1]  # Close the loop
    angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
    angles += angles[:1]

    # Plot
    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
    ax.plot(angles, values, linewidth=2, label=row['Name'])
    ax.fill(angles, values, alpha=0.25)
    ax.set_title(f"Pharmacophore Profile: {row['Name']}", y=1.1)
    ax.set_theta_offset(np.pi / 2)
    ax.set_theta_direction(-1)
    ax.set_thetagrids(np.degrees(angles[:-1]), categories)
    ax.set_ylim(0, 1)
    ax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))
    plt.show()

# 📊 Heatmap of similarity scores
import seaborn as sns

sim_columns = ["Estradiol", "Tamoxifen", "PHTPP", "WAY-200070"]
sns.clustermap(df_sim[sim_columns], cmap="YlGnBu", figsize=(10, 8),
               row_colors=df_sim["Predicted_Class"].map({
                   "Agonist-like": "lightgreen",
                   "SERM / General Antagonist": "orange",
                   "ERβ Antagonist-like": "red",
                   "ERβ Agonist-like": "blue",
                   "Unclassified": "gray"
               }))

plt.title("Compound Similarity to References")
plt.show()

# 📊 Radar chart (by compound name)
import numpy as np
import matplotlib.pyplot as plt

categories = ["Estradiol", "Tamoxifen", "PHTPP", "WAY-200070"]
num_vars = len(categories)

# 🔁 Loop through first 5 compounds and use their names
for _, row in df_sim.head(5).iterrows():
    values = [row[cat] for cat in categories]
    values += values[:1]  # close the polygon
    angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
    angles += angles[:1]

    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
    ax.plot(angles, values, linewidth=2, label=row['Name'])
    ax.fill(angles, values, alpha=0.25)
    ax.set_title(f"Similarity Profile: {row['Name']}", y=1.08)
    ax.set_theta_offset(np.pi / 2)
    ax.set_theta_direction(-1)
    ax.set_thetagrids(np.degrees(angles[:-1]), categories)
    ax.set_ylim(0, 1)
    ax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))
    plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Set index as compound names for heatmap clarity
df_heat = df_sim.set_index("Name")

# Remove reference compounds from the heatmap data
ref_compounds_to_remove = list(ref_smiles.keys())
df_heat = df_heat.drop(ref_compounds_to_remove, errors='ignore')

sim_columns = ["Estradiol", "Tamoxifen", "PHTPP", "WAY-200070"]

# Optional: color code by class
# row_colors = df_heat["Predicted_Class"].map({
#     "Agonist-like": "green",
#     "SERM / General Antagonist": "orange",
#     "ERβ Antagonist-like": "red",
#     "ERβ Agonist-like": "blue",
#     "Unclassified": "gray"
# })
# Remove the Predicted_Class column as requested


# Generate clustered heatmap with names
g = sns.clustermap(df_heat[sim_columns], cmap="YlGnBu", figsize=(10, 8),
               #  row_colors=row_colors # Removed row_colors as Predicted_Class is removed
               row_cluster=False, # Remove row clustering
               col_cluster=False, # Remove column clustering
               cbar_pos=(0.85, 0.15, 0.05, 0.6) # Adjust color bar position to the right and align vertically
               )

# Move row labels to the left
ax = g.ax_heatmap
ax.yaxis.tick_left()
ax.yaxis.set_label_position("left")
ax.set_ylabel('') # Remove the 'Name' label from the y-axis
plt.setp(ax.get_yticklabels(), rotation=0) # Ensure labels are horizontal

plt.suptitle("Compound Similarity to Pharmacological References", y=1.02) # Add title here for better positioning
plt.show()

# 💾 Save heatmap with high resolution
g.savefig("Pharm2D_Similarity_Heatmap.png", dpi=300, bbox_inches='tight')
files.download("Pharm2D_Similarity_Heatmap.png")